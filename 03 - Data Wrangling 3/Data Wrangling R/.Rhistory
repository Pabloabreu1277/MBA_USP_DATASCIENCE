View(descritivas_base_grupo)
View(descritivas_base_grupo)
base_sem_grupo <- base_grupo %>% ungroup()
glimpse(base_sem_grupo)
summarise(base_sem_grupo,
mean(tempo)) # informações para a base completa
descritivas_novos_grupos <- nova_base %>%
group_by(periodo, perfil) %>%
summarise(tempo_médio = mean(tempo),
mínimo = min(tempo),
máximo = max(tempo),
contagem = n()) %>%
arrange(desc(máximo))
View(descritivas_novos_grupos)
table(nova_base$periodo)
table(nova_base$perfil)
table(nova_base$periodo,
nova_base$perfil)
dados_freq_1 <- as.data.frame(table(nova_base$periodo,
nova_base$perfil))
View(dados_freq_1)
nova_base %>%
count(periodo)
nova_base %>%
count(perfil)
dados_freq_2 <- nova_base %>%
count(periodo, perfil, name = "contagem")
filtro_1 <- nova_base[nova_base$tempo > 20,] # critérios antes da vírgula
filtro_2 <- nova_base[nova_base$tempo > 20 & nova_base$distancia < 25,]
filtro_3 <- nova_base[nova_base$tempo <=15 | nova_base$periodo == "Tarde",]
base_filtro_1 <- filter(nova_base, tempo > 20)
base_filtro_2 <- filter(nova_base, tempo > 20 & distancia < 25)
base_filtro_3 <- filter(nova_base, periodo == "Manhã")
base_filtro_4 <- filter(nova_base, periodo != "Manhã" & between(tempo, 20, 50))
base_filtro_5 <- filter(nova_base, tempo <= 15 | periodo == "Tarde")
base_filtro_6 <- filter(nova_base, tempo > mean(tempo))
library("tidyverse")
library(readxl)
dataset_inicial <- read_excel("(1.2) Dataset Aula Data Wrangling.xls")
dataset_merge <- read_excel("(1.3) Dataset Aula Data Wrangling (Join).xls")
View(dataset_inicial) # Mostra a base de dados completa em uma nova aba
head(dataset_inicial, n=5) # Mostra as 5 primeiras observações da base de dados
str(dataset_inicial) # Mostra a estrutura da base de dados
glimpse(dataset_inicial) # Função parecida com a str
print(dataset_inicial) # Apresenta a base de dados no console
dim(dataset_inicial) # As dimensões do dataset: linhas e colunas, respectivamente
names(dataset_inicial) # Para ver os nomes das variáveis
dataset_inicial$`Tempo para chegar à escola (minutos)`
novos_nomes <- c("Observações",
"Tempo para chegar",
"Distância percorrida",
"Semáforos",
"Período",
"Perfil")
print(novos_nomes)
names(dataset_inicial) <- novos_nomes
head(dataset_inicial, n=5)
nova_base <- rename(dataset_inicial,
observacoes = "Observações",
tempo = "Tempo para chegar",
distancia = "Distância percorrida",
semaforos = "Semáforos",
periodo = "Período",
perfil = "Perfil")
head(nova_base, n=5)
descritivas_nova_base <- summarise(nova_base,
observações = n(),
média = mean(tempo),
mediana = median(tempo),
desv_pad = sd(tempo),
mínimo = min(tempo),
máximo = max(tempo),
quartil_3 = quantile(tempo, probs = 0.75))
descritivas_nova_base1<- summarise(nova_base,
observações = n(),
média = mean(tempo),
mediana = median(tempo),
desv_pad = sd(tempo),
mínimo = min(tempo),
máximo = max(tempo),
quartil_4 = quantile(tempo, probs = 1.00),
quartil_3 = quantile(tempo, probs = 0.75),
quartil_2 = quantile(tempo, probs = 0.50),
quartil_1 = quantile(tempo, probs = 0.25))
print(descritivas_nova_base)
print(descritivas_nova_base1)
base_grupo <- group_by(nova_base, periodo)
View(base_grupo)
View(nova_base)
glimpse(base_grupo)
descritivas_base_grupo <- base_grupo %>%
summarise(média = mean(tempo),
desvio_pad = sd(tempo),
n_obs = n())
base_sem_grupo <- base_grupo %>% ungroup()
glimpse(base_sem_grupo)
summarise(base_sem_grupo,
mean(tempo)) # informações para a base completa
descritivas_novos_grupos <- nova_base %>%
group_by(periodo, perfil) %>%
summarise(tempo_médio = mean(tempo),
mínimo = min(tempo),
máximo = max(tempo),
contagem = n()) %>%
arrange(desc(máximo))
View(descritivas_novos_grupos)
table(nova_base$periodo)
table(nova_base$perfil)
table(nova_base$periodo,
nova_base$perfil)
dados_freq_1 <- as.data.frame(table(nova_base$periodo,
nova_base$perfil))
View(dados_freq_1)
nova_base %>%
count(periodo)
nova_base %>%
count(perfil)
dados_freq_2 <- nova_base %>%
count(periodo, perfil, name = "contagem")
filtro_1 <- nova_base[nova_base$tempo > 20,] # critérios antes da vírgula
filtro_2 <- nova_base[nova_base$tempo > 20 & nova_base$distancia < 25,]
filtro_3 <- nova_base[nova_base$tempo <=15 | nova_base$periodo == "Tarde",]
base_filtro_1 <- filter(nova_base, tempo > 20)
base_filtro_2 <- filter(nova_base, tempo > 20 & distancia < 25)
base_filtro_3 <- filter(nova_base, periodo == "Manhã")
View(base_filtro_3)
base_filtro_4 <- filter(nova_base, periodo != "Manhã" & between(tempo, 20, 50))
View(base_filtro_4)
base_filtro_5 <- filter(nova_base, tempo <= 15 | periodo == "Tarde")
#between
base_filtro_5 <- filter(nova_base, tempo <= 15 | periodo == "Tarde")
base_filtro_6 <- filter(nova_base, tempo > mean(tempo))
View(base_filtro_6)
base_filtro_7 <- nova_base %>%
group_by(periodo) %>%
filter(tempo > mean(tempo)) %>%
ungroup()
View(base_filtro_7)
nova_base %>%
group_by(periodo) %>%
summarise(mean(tempo))
descritivas_condic <- nova_base %>%
filter(tempo > 20) %>%
group_by(perfil) %>%
summarise(observações = sum(!is.na(distancia)),
média = mean(distancia, na.rm = T),
mediana = median(distancia, na.rm = T),
desv_pad = sd(distancia, na.rm = T),
mínimo = min(distancia, na.rm = T),
máximo = max(distancia, na.rm = T),
quartil_1 = quantile(distancia, probs = 0.25, na.rm = T),
quartil_3 = quantile(distancia, probs = 0.75, na.rm = T)) %>%
arrange(média)
View(descritivas_condic)
selecao_pessoas <- c("Gabriela", "Gustavo", "Letícia", "Antônio", "Ana")
nova_base %>%
filter(observacoes %in% selecao_pessoas)
nova_base %>%
filter(observacoes %in% selecao_pessoas) %>%
summarise(tempo_medio_pessoas = mean(tempo))
nova_base %>%
filter(!(observacoes %in% selecao_pessoas))
nova_base %>%
filter(!(observacoes %in% selecao_pessoas)) %>%
summarise(tempo_medio_pessoas = mean(tempo))
nova_base %>% slice(5:9) # com base na posição das linhas
nova_base %>% slice(1:2, 5:9) # com base na posição das linhas com intervalo
nova_base %>% slice_head(n=3) # as três primeiras linhas
nova_base %>% slice_tail(n=3) # as três últimas linhas
nova_base %>% slice_min(order_by = distancia, prop = 0.40) # os prop % menores
nova_base %>% slice_max(order_by = distancia, prop = 0.10) # os prop % maiores
dataset_inicial <- dataset_inicial %>% rename(observacoes=Observações)
dataset_merge <- dataset_merge %>% rename(observacoes=Estudante)
base_left_join <- left_join(dataset_inicial, dataset_merge,
by = "observacoes")
View(base_left_join)
View(base_left_join)
dataset_inicial %>% left_join(dataset_merge, by = "observacoes")
base_right_join <- right_join(dataset_inicial, dataset_merge,
by = "observacoes")
View(base_right_join)
dataset_inicial %>% right_join(dataset_merge, by = "observacoes")
base_inner_join <- inner_join(dataset_inicial, dataset_merge,
by = "observacoes")
View(base_inner_join)
base_full_join <- full_join(dataset_inicial, dataset_merge,
by = "observacoes")
View(base_full_join)
base_full_join <- full_join(dataset_inicial, dataset_merge,
by = "observacoes")
View(base_full_join)
base_semi_join <- semi_join(dataset_inicial, dataset_merge,
by = "observacoes")
View(base_semi_join)
base_anti_join <- anti_join(dataset_inicial, dataset_merge,
by = "observacoes")
View(base_anti_join)
dataset_bind_1 <- tibble(var1 = c("obs1", "obs2", "obs3", "obs4"),
var2 = 1:4,
var3 = 10:13)
View(base_right_join)
View(dataset_bind_1)
dataset_bind_2 <- tibble(var4 = c("obs1", "obs2", "obs3", "obs4"),
var5 = 100:103)
dataset_bind_3 <- tibble(var6 = c("obs50", "obs51", "obs52", "obs53"),
var7 = 1500:1503)
dataset_bind_4 <- tibble(var1 = c("obs5", "obs6", "obs7", "obs8", "obs9"),
var2 = 5:9,
var3 = 14:18)
dataset_bind_colunas <- bind_cols(dataset_bind_1, dataset_bind_2)
View(dataset_bind_colunas)
dataset_bind_1 %>% bind_cols(dataset_bind_3)
dataset_bind_linhas <- bind_rows(dataset_bind_1, dataset_bind_4)
View(dataset_bind_linhas)
vetor_input <- c("tempo", "distancia", "semaforos")
map_dbl(nova_base[vetor_input], mean, na.rm = T)
map_dbl(nova_base[vetor_input], median, na.rm = T)
map_dbl(nova_base[vetor_input], sd, na.rm = T)
map(nova_base[vetor_input], quantile, probs = c(0.25, 0.50, 0.75), na.rm = T)
lista_quartis <- map(nova_base[vetor_input], quantile, probs = c(0.25, 0.50, 0.75), na.rm = T)
lista_quartis[["tempo"]]
lista_quartis[["tempo"]][["25%"]]
map(nova_base[vetor_input], ~ summary(.))
coef_var <- function(x) {
cv <- ((sd(x, na.rm=T))/(mean(x, na.rm=T)))*100
return(cv)
}
View(coef_var)
map_dbl(nova_base[vetor_input], coef_var)
map_dbl(nova_base[vetor_input], ~ (sd(., na.rm=T) / mean(., na.rm=T))*100)
map(nova_base, 5)
médias_var <- list(5, 10, 15)
desv_pad_var <- list(1, 2, 3)
map2(médias_var, desv_pad_var, rnorm, n = 5)
tamanho_var <- list(7, 9, 11)
parametros <- list(tamanho_var, médias_var, desv_pad_var) # sequência da fórmula
pmap(parametros, rnorm)
parametros2 <- list(mean = médias_var, sd = desv_pad_var, n = tamanho_var)
pmap(parametros2, rnorm)
base_grupo <- group_by(nova_base, periodo)
View(base_grupo)
descritivas_condic <- nova_base %>%
filter(tempo > 20) %>%
group_by(perfil) %>%
summarise(observações = sum(!is.na(distancia)),
média = mean(distancia, na.rm = T),
mediana = median(distancia, na.rm = T),
desv_pad = sd(distancia, na.rm = T),
mínimo = min(distancia, na.rm = T),
máximo = max(distancia, na.rm = T),
quartil_1 = quantile(distancia, probs = 0.25, na.rm = T),
quartil_3 = quantile(distancia, probs = 0.75, na.rm = T)) %>%
arrange(média)
analyse(descritivas_condic)
dataset_inicial <- dataset_inicial %>% rename(observacoes=Observações)
dataset_merge <- dataset_merge %>% rename(observacoes=Estudante)
base_left_join <- left_join(dataset_inicial, dataset_merge,
by = "observacoes")
View(base_left_join)
# Importando os pacotes
library(readxl)
library(tidyverse)
# Importando o banco de dados
dataset_wdi <- read_excel("(2.2) WDI World Bank.xlsx")
# Informações básicas do banco de dados
dim(dataset_wdi)
glimpse(dataset_wdi)
glimpse(dataset_wdi)
View(dataset_wdi)
# Vamos analisar um pouco melhor o conteúdo do dataset:
unique(dataset_wdi$`Country Name`)
unique(dataset_wdi$`Series Name`)
options(max.print = 3000)
unique(dataset_wdi$`Series Name`) # após ajuste, aparecem todos os indicadores
unique(dataset_wdi$`Topic`)
# Importando os pacotes
library(readxl)
library(tidyverse)
# Importando o banco de dados
dataset_wdi <- read_excel("(2.2) WDI World Bank.xlsx")
# Informações básicas do banco de dados
dim(dataset_wdi)
glimpse(dataset_wdi)
# Vamos analisar um pouco melhor o conteúdo do dataset:
unique(dataset_wdi$`Country Name`)
unique(dataset_wdi$`Series Name`)
#Prints que aparecem no console
options(max.print = 3000)
unique(dataset_wdi$`Series Name`) # após ajuste, aparecem todos os indicadores
unique(dataset_wdi$`Topic`)
# Para facilitar, vamos iniciar simplificando os nomes das colunas
dataset_wdi <- dataset_wdi %>%
rename(pais = 1,
cod_pais = 2,
serie = 3,
cod_serie = 4,
ano_2021 = 5,
topico = 6)
# Nota-se que as últimas linhas do banco de dados não são observações
# Vamos limpar de forma simples, selecionando as linhas válidas
dataset_wdi <- dataset_wdi[1:383572,]
glimpse(dataset_wdi)
# Nota-se que as últimas linhas do banco de dados não são observações
# Vamos limpar de forma simples, selecionando as linhas válidas
dataset_wdi <- dataset_wdi[1:383572,]
dataset_wdi <- dataset_wdi %>%
mutate(ano_2021 = na_if(ano_2021, ".."))
View(dataset_wdi)
View(dataset_wdi)
dataset_wdi <- dataset_wdi %>%
mutate(ano_2021_aj = as.double(ano_2021)) %>%
select(-ano_2021)
glimpse(dataset_wdi)
unique(dataset_wdi$topico)
dataset_wdi_saude <- dataset_wdi %>%
filter(str_detect(topico, "^Health"))
View(dataset_wdi_saude)
dataset_wdi_saude <- dataset_wdi %>%
filter(str_detect(topico, "^Health"))
unique(dataset_wdi_saude$topico)
dataset_wdi_saude_wide <- pivot_wider(dataset_wdi_saude,
id_cols = c("pais", "cod_pais"),
names_from = "serie",
values_from = "ano_2021_aj")
View(dataset_wdi_saude_wide)
dataset_wdi_saude_final <- pivot_wider(dataset_wdi_saude,
id_cols = c("pais", "cod_pais"),
names_from = c("topico", "serie"),
values_from = "ano_2021_aj")
View(dataset_wdi_saude_final)
dataset_wdi_saude_final <- dataset_wdi_saude_final %>%
purrr::discard(~ all(is.na(.)))
dataset_wdi_saude_final <- dataset_wdi_saude_final %>%
purrr::discard(~ all(is.na(.)))
View(dataset_wdi_saude_final)
View(dataset_wdi_saude_final)
income <- read_excel("(2.3) WDI Income Group.xlsx")
income <- income %>%
select(Code, `Income Group`) %>%
rename(cod_pais = Code)
View(income)
dataset_wdi_saude_final <- dataset_wdi_saude_final %>%
left_join(income, by = "cod_pais") %>%
relocate(`Income Group`, .after = cod_pais)
View(dataset_wdi_saude_final)
library(tidyverse)
base_cvm <- read.csv("(3.2) CVM Resultado.csv",
sep = ";",
encoding = "latin1")
options(max.print = 3000)
unique(base_cvm$DS_CONTA)
View(base_cvm)
options(max.print = 3000)
unique(base_cvm$DS_CONTA)
base_cvm <- base_cvm %>%
filter(CD_CONTA == "3.01" | CD_CONTA == "3.11")
base_cvm_aj <- base_cvm %>%
group_by(CD_CONTA, CD_CVM) %>%
arrange(base_cvm, DT_REFER, .by_group = T) %>%
ungroup()
View(base_cvm_aj)
base_cvm_aj <- distinct(base_cvm_aj)
View(base_cvm_aj)
base_cvm_aj <- distinct(base_cvm_aj)
contagem <- base_cvm_aj %>%
count(CD_CVM, CD_CONTA)
View(contagem)
base_cvm_aj <- base_cvm_aj %>%
filter(!(CD_CVM == 26077 & VERSAO == 3))
contagem_nova <- base_cvm_aj %>%
count(CD_CVM, CD_CONTA)
View(contagem_nova)
cadastrais <- read.csv("(3.3) CVM Dados Cadastrais.csv",
sep = ";",
encoding = "latin1")
cadastrais <- cadastrais %>%
select (CD_CVM, SETOR_ATIV) %>%
filter(SETOR_ATIV != "") %>%
distinct()
base_cvm_aj <- base_cvm_aj %>%
left_join(cadastrais, by = "CD_CVM")
base_cvm_aj <- base_cvm_aj %>%
group_by(CD_CVM, CD_CONTA) %>%
mutate(VARIACAO = ((VL_CONTA - lag(VL_CONTA, n = 1L))/lag(VL_CONTA, n = 1L))) %>%
ungroup()
View(base_cvm_aj)
base_cvm_aj <- base_cvm_aj %>%
mutate(VARIACAO = round(VARIACAO, 3))
View(base_cvm_aj)
View(base_cvm_aj)
summarise(base_cvm_aj,
observações=n(),
média=mean(VARIACAO, na.rm = TRUE))
View(base_cvm_aj)
infinitos <- is.infinite(base_cvm_aj$VARIACAO)
base_cvm_aj <- base_cvm_aj %>%
mutate(INF = infinitos) %>%
filter(INF == FALSE)
base_cvm_aj <- base_cvm_aj %>%
mutate(INF = infinitos) %>%
filter(INF == FALSE)
summarise(base_cvm_aj,
observações=n(),
média=mean(VARIACAO, na.rm = TRUE))
base_cvm_excl <- base_cvm_aj %>%
filter(!(VARIACAO > 2|VARIACAO < -2))
summarise(base_cvm_excl,
observações=n(),
média=mean(VARIACAO, na.rm = TRUE))
base_cvm_excl %>%
group_by(CD_CONTA) %>%
summarise(média = mean(VARIACAO, na.rm = TRUE),
n_obs = n()) %>%
ungroup()
tabela <- base_cvm_excl %>%
group_by(CD_CONTA, SETOR_ATIV) %>%
summarise(média = mean(VARIACAO, na.rm = TRUE),
n_obs = n()) %>%
ungroup()
View(tabela)
base_cvm_atual <- base_cvm_aj %>%
mutate(ano = substr(DT_FIM_EXERC, 1, 4),
VALORES_ATUAL = if_else(ano == "2021",
VL_CONTA*1.0579,
VL_CONTA*1)) %>%
group_by(CD_CVM, CD_CONTA) %>%
mutate(VARIACAO_ATUAL = ((VALORES_ATUAL - lag(VALORES_ATUAL, n = 1L))/lag(VALORES_ATUAL, n = 1L))) %>%
ungroup() %>%
filter((!(VARIACAO_ATUAL > 2|VARIACAO_ATUAL < -2)))
View(base_cvm_atual)
base_cvm_atual %>%
group_by(CD_CONTA) %>%
summarise(média=mean(VARIACAO_ATUAL, na.rm = TRUE)) %>%
ungroup()
# Carregando os pacotes
library(tidyverse)
# Importando o banco de dados
jogos <- read.csv("(4.2) Jogos Copa 22.csv")
glimpse(jogos)
View(jogos)
jogos <- jogos %>% mutate(time_vencedor = case_when(
team_home_score - team_away_score > 0 ~ "mandante",
team_home_score - team_away_score < 0 ~ "visitante",
team_home_score - team_away_score == 0 ~ "empate")) %>%
relocate(time_vencedor, .after = team_away_score)
View(jogos)
View(jogos)
jogos <- jogos %>% mutate(pens_home_score = as.double(pens_home_score),
pens_away_score = as.double(pens_away_score),
time_vencedor = case_when(
pens_home_score - pens_away_score > 0 ~ "mandante",
pens_home_score - pens_away_score < 0 ~ "visitante",
is.na(pens_home_score - pens_away_score) ~ time_vencedor))
ggplot(jogos) +
geom_bar(aes(x = time_vencedor), fill = "blue") +
labs(x = "Vencedor",
y = "Contagem") +
theme_light()
fases <- word(jogos$stage, 1)
print(fases)
jogos <- jogos %>%
mutate(fases = recode(fases,
"Group" = 1,
"Round" = 2,
"Quarter-finals" = 3,
"Semi-finals" = 4,
"Match" = 5,
"Final"= 6)) %>%
relocate(fases, .after = stage)
View(jogos)
View(jogos)
ggplot(jogos) +
geom_bar(aes(x = interaction(time_vencedor, fases), fill=factor(fases))) +
labs(x = "Vencedor por Fase",
y = "Contagem") +
scale_fill_brewer(palette=18)
jogos <- jogos %>% mutate(previsao = case_when(
prediction_team_home_win > prediction_team_away_win ~ "mandante",
prediction_team_home_win < prediction_team_away_win ~ "visitante"),
analise_prev = case_when(
previsao == time_vencedor ~ "acerto",
previsao != time_vencedor ~ "erro"))
jogos <- jogos %>% mutate(previsao = case_when(
prediction_team_home_win > prediction_team_away_win ~ "mandante",
prediction_team_home_win < prediction_team_away_win ~ "visitante"),
analise_prev = case_when(
previsao == time_vencedor ~ "acerto",
previsao != time_vencedor ~ "erro"))
ggplot(jogos) +
geom_bar(aes(x = analise_prev), fill = "green") +
geom_text(aes(x = analise_prev, label = ..count..), stat = "count", vjust = 2) +
labs(x = "Previsões",
y = "Contagem") +
theme_light()
extrai_gol <- str_extract_all(jogos$events_list,
"'Goal', 'action_player_1': '\\w*(.*?)\\w*\\'",
simplify = TRUE)
View(extrai_gol)
extrai_gol <- gsub("'Goal', 'action_player_1': ' ", "", extrai_gol)
extrai_gol <- gsub(" '", "", extrai_gol)
extrai_penalti <- str_extract_all(jogos$events_list,
"'event_type': 'Penalty', 'action_player_1': '\\w*(.*?)\\w*\\'",
simplify = TRUE)
extrai_penalti <- gsub("'event_type': 'Penalty', 'action_player_1': ' ", "", extrai_penalti)
extrai_penalti <- gsub(" '", "", extrai_penalti)
sort(table(cbind(extrai_gol, extrai_penalti)), decreasing = T)
dataset_wdi <- dataset_wdi %>%
mutate(ano_2021 = na_if(ano_2021, ".."))
dataset_wdi <- dataset_wdi %>%
mutate(ano_2021_aj = as.double(ano_2021)) %>%
select(-ano_2021)
glimpse(dataset_wdi)
